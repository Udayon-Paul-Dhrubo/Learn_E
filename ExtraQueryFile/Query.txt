 getTopCategories = async function() {

        const query = 'SELECT "Catagory", COUNT("course_id") FROM Course GROUP BY "Catagory"';
        const params = [];
        const result = await this.query(query, params, 'false');
        return result;
    }

    getTopCourses = async function() {
        const query = 'select * from Courses ORDER BY "Rating"';
        const params = [];
        const result = await this.query(query, params, 'false');
        return result;
    }

    getTopTeachers = async function() {
        const query = 'select * from Users where "User_ID" in (select "Teacher_ID" from Teacher)';
        const params = [];
        const result = await this.query(query, params, 'false');
        return result;
    }

    getTestimonials_about_learnE = async function() {
        const query = 'select "Testimonial",(SELECT "Name" FROM User WHERE "User_ID"=T."Student_id")AS Student_Name from Student T where "Testimonial" IS NOT NULL';
        const params = [];
        const result = await this.query(query, params, 'false');
        return result;
    }

    last_course_id_inserted = async function() {
        const query = 'select MAX("course_id") from Course';
        const params = [];
        const result = await this.query(query, params, 'false');
        return result;
    }

//finding courses for specific catagory

getCoursesOfCatagory = async function(Catagory) {

        const query = 'select "Title","Price","Rating","total_Enrolled" from Course where "Catagory"= :1';
        const params = [Catagory];
        const result = await this.query(query, params, 'false');
        return result;
    }
//Finding modules for a course by course_ID

 findModulesByCourseId = async function(course_ID) {
        const query = 'SELECT * FROM Module  where "Module_ID" IN ( SELECT "Module_ID" FROM CourseModules WHERE "Course_ID"= :1 ) ORDER BY "Module_ID"'; //PROBLEM ,NEED SERIAL
        const params = [userId];
        const result = await this.query(query, params, 'false');
        return result;
    }

//Finding contents of a module
findContentsOfModule=async function(Module_ID) {
        const query = 'select * from "Content" where "Module_ID"=: 1';
        const params = [Module_ID];
        const result = await this.query(query, params, 'false');
        return result;
    }
--------------------------------


//for adding a module by teacher -insertion

step by step
1.insert into module
2.insert into course modules //while adding in course module you have to find the last inserted module of that course
3.insert a content with that module_ID
--------------------------
//for finding the last module added
---------------------------------


//for finding a course by searching it's name


getCourseBySearchName = async function(Name) {

        const query = 'Select * from course where "Title" = :1';
const params = [Name];
        const result = await this.query(query, params, 'false');
        return result;
    }

    //getting all the contents of a course
getContentsOfCourse = async function(Course_ID) {

        const query = 'SELECT * FROM "Video_Content" JOIN "CourseModules" USING("Module_ID") WHERE "Course_ID"=:1 ORDER BY "Serial";';
const params = [Course_ID];
        const result = await this.query(query, params, 'false');
        return result;
    }




/////////////////////////////////////////////////////////////////////////////////////////////////////////////
CREATE OR REPLACE TRIGGER UPDATE_CONTENT 
AFTER INSERT 
ON "Completion" 
FOR EACH ROW 
DECLARE 
V_COURSEID NUMBER; 
V_STUDENTID NUMBER; 
BEGIN 
V_COURSEID := :NEW."Course_ID" ; 
V_STUDENTID := :NEW."Student_ID" ; 
UPDATE "PurchaseHistory" SET "ContentCompleted"="ContentCompleted"+1 WHERE "Student_ID"=V_STUDENTID AND 
 "Course_ID"=V_COURSEID; 
END ;
/


//////////////////////////////////////////////////////////////////////////////////////////////////
CREATE OR REPLACE FUNCTION GET_PROGRESS(COURSE_ID IN NUMBER,STUDENT_ID IN NUMBER) 
RETURN NUMBER IS 
TOTAL_VIDEOS NUMBER ; 
TOTAL_QUIZES NUMBER ; 
TOTAL_CONTENT NUMBER ; 
FINISHED_CONTENT NUMBER; 
PROGRESS NUMBER; 
BEGIN 
SELECT COUNT(*) INTO TOTAL_VIDEOS FROM "CourseModules" JOIN "Video_Content" USING("Module_ID") WHERE "Course_ID"= COURSE_ID ; 
SELECT COUNT(*) INTO TOTAL_QUIZES FROM "CourseModules" JOIN "Quiz_Content" USING("Module_ID") WHERE "Course_ID"=COURSE_ID ; 
SELECT "ContentCompleted" INTO FINISHED_CONTENT FROM "PurchaseHistory" WHERE "Student_ID"=STUDENT_ID AND "Course_ID"=COURSE_ID; 
TOTAL_CONTENT :=TOTAL_VIDEOS+TOTAL_QUIZES; 
PROGRESS := (FINISHED_CONTENT*100)/TOTAL_CONTENT; 
RETURN PROGRESS ;  
EXCEPTION 
WHEN NO_DATA_FOUND THEN 
RETURN 0 ; 
WHEN TOO_MANY_ROWS THEN 
RETURN 0 ; 
WHEN OTHERS THEN 
RETURN 0 ; 
END ; 
/


/////////////////////////////////////////////////////////////////////////////////////////////////

CREATE OR REPLACE TRIGGER UPDATE_TOTAL_ENROLLED
AFTER INSERT
ON "PurchaseHistory"
FOR EACH ROW
DECLARE
V_COURSEID NUMBER;
BEGIN
V_COURSEID := :NEW."Course_ID" ;
UPDATE "Course" SET "total_Enrolled"="total_Enrolled"+1 WHERE
 "course_id"=V_COURSEID;
END ;
/


/////////////////////////////////////////////////////////////////////////////////////////////////

CREATE OR REPLACE TRIGGER UPDATE_RATING
AFTER INSERT
ON "Rating"
FOR EACH ROW
DECLARE
V_RATING NUMBER;
V_COURSEID NUMBER;
V_RATEDBY NUMBER;

BEGIN
V_COURSEID := :NEW."Course_ID" ;
V_RATING := :NEW."Rating" ;
SELECT "RatedBy" INTO V_RATEDBY FROM "Course" WHERE "course_id"=V_COURSEID;
UPDATE "Course" SET "Rating"=(("Rating"*V_RATEDBY+V_RATING)/(V_RATEDBY+1)), "RatedBy"="RatedBy"+1  WHERE
 "course_id"=V_COURSEID;
END ;
/


/////////////////////////////////////////////////////////////////////////////////////////////////////

